{"version":3,"file":"index.js","sources":["../src/infrastructure/services/struct/indigoWorker.types.ts","../src/infrastructure/services/struct/standaloneStructService.ts","../src/infrastructure/services/struct/standaloneStructServiceProvider.ts"],"sourcesContent":["/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nexport const enum Command {\n  Info,\n  Convert,\n  Layout,\n  Clean,\n  Aromatize,\n  Dearomatize,\n  CalculateCip,\n  Automap,\n  Check,\n  Calculate,\n  GenerateImageAsBase64,\n  GenerateInchIKey\n}\n\nexport enum SupportedFormat {\n  Rxn = 'rxnfile',\n  Mol = 'molfile',\n  Smiles = 'smiles',\n  Smarts = 'smarts',\n  CML = 'cml',\n  InChI = 'inchi',\n  InChIAuxInfo = 'inchi-aux',\n  Ket = 'ket',\n  CDXML = 'cdxml'\n}\n\nexport interface WithStruct {\n  struct: string\n}\n\nexport interface WithFormat {\n  format: SupportedFormat\n}\n\nexport interface WithSelection {\n  selectedAtoms: Array<number>\n}\n\nexport interface CommandOptions {\n  [key: string]: string | number | boolean | undefined\n}\n\nexport interface CommandData {\n  options?: CommandOptions\n}\n\nexport interface CheckCommandData extends CommandData, WithStruct {\n  types: Array<string>\n}\n\nexport interface ConvertCommandData\n  extends CommandData,\n    WithStruct,\n    WithFormat {}\n\nexport interface GenerateInchIKeyCommandData extends CommandData, WithStruct {}\n\nexport interface GenerateImageCommandData extends CommandData, WithStruct {\n  outputFormat: 'png' | 'svg'\n  backgroundColor?: string\n}\n\nexport interface LayoutCommandData\n  extends CommandData,\n    WithStruct,\n    WithFormat {}\n\nexport interface CleanCommandData\n  extends CommandData,\n    WithStruct,\n    WithSelection,\n    WithFormat {}\n\nexport interface AromatizeCommandData\n  extends CommandData,\n    WithStruct,\n    WithFormat {}\n\nexport interface DearomatizeCommandData\n  extends CommandData,\n    WithStruct,\n    WithFormat {}\n\nexport interface CalculateCipCommandData\n  extends CommandData,\n    WithStruct,\n    WithFormat {}\n\nexport type CalculateProps =\n  | 'molecular-weight'\n  | 'most-abundant-mass'\n  | 'monoisotopic-mass'\n  | 'gross'\n  | 'gross-formula'\n  | 'mass-composition'\n\nexport interface CalculateCommandData\n  extends CommandData,\n    WithStruct,\n    WithSelection {\n  properties: Array<string>\n}\n\nexport interface AutomapCommandData\n  extends CommandData,\n    WithStruct,\n    WithFormat {\n  mode: string\n}\n\nexport interface OutputMessage<T> {\n  hasError?: boolean\n  payload?: T\n  error?: string\n}\nexport interface InputMessage<T> {\n  type: Command\n  data: T\n}\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  AromatizeCommandData,\n  AutomapCommandData,\n  CalculateCipCommandData,\n  CalculateCommandData,\n  CalculateProps,\n  CheckCommandData,\n  CleanCommandData,\n  Command,\n  CommandOptions,\n  ConvertCommandData,\n  DearomatizeCommandData,\n  GenerateImageCommandData,\n  GenerateInchIKeyCommandData,\n  InputMessage,\n  LayoutCommandData,\n  OutputMessage,\n  SupportedFormat\n} from './indigoWorker.types'\nimport {\n  AromatizeData,\n  AromatizeResult,\n  AutomapData,\n  AutomapResult,\n  CalculateCipData,\n  CalculateCipResult,\n  CalculateData,\n  CalculateResult,\n  CheckData,\n  CheckResult,\n  ChemicalMimeType,\n  CleanData,\n  CleanResult,\n  ConvertData,\n  ConvertResult,\n  DearomatizeData,\n  DearomatizeResult,\n  GenerateImageOptions,\n  InfoResult,\n  LayoutData,\n  LayoutResult,\n  RecognizeResult,\n  StructService,\n  StructServiceOptions\n} from 'ketcher-core'\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport IndigoWorker from 'web-worker:./indigoWorker'\n\ninterface KeyValuePair {\n  [key: string]: number | string | boolean | object\n}\n\nfunction convertMimeTypeToOutputFormat(\n  mimeType: ChemicalMimeType\n): SupportedFormat {\n  let format: SupportedFormat\n  switch (mimeType) {\n    case ChemicalMimeType.Mol: {\n      format = SupportedFormat.Mol\n      break\n    }\n    case ChemicalMimeType.Rxn: {\n      format = SupportedFormat.Rxn\n      break\n    }\n    case ChemicalMimeType.DaylightSmiles:\n    case ChemicalMimeType.ExtendedSmiles: {\n      format = SupportedFormat.Smiles\n      break\n    }\n    case ChemicalMimeType.DaylightSmarts: {\n      format = SupportedFormat.Smarts\n      break\n    }\n    case ChemicalMimeType.InChI: {\n      format = SupportedFormat.InChI\n      break\n    }\n    case ChemicalMimeType.InChIAuxInfo: {\n      format = SupportedFormat.InChIAuxInfo\n      break\n    }\n    case ChemicalMimeType.CML: {\n      format = SupportedFormat.CML\n      break\n    }\n    case ChemicalMimeType.KET: {\n      format = SupportedFormat.Ket\n      break\n    }\n    case ChemicalMimeType.CDXML: {\n      format = SupportedFormat.CDXML\n      break\n    }\n    default: {\n      throw new Error('Unsupported chemical mime type')\n    }\n  }\n\n  return format\n}\n\nfunction mapCalculatedPropertyName(property: CalculateProps) {\n  let mappedProperty: CalculateProps | undefined\n  switch (property) {\n    case 'gross-formula': {\n      mappedProperty = 'gross'\n      break\n    }\n    default:\n      mappedProperty = property\n      break\n  }\n\n  return mappedProperty\n}\n\nfunction mapWarningGroup(property: string) {\n  let mappedProperty: string | undefined\n  switch (property) {\n    case 'OVERLAP_BOND': {\n      mappedProperty = 'overlapping_bonds'\n      break\n    }\n    default:\n      mappedProperty = property.toLowerCase()\n      break\n  }\n\n  return mappedProperty\n}\n\nclass IndigoService implements StructService {\n  private readonly defaultOptions: StructServiceOptions\n\n  constructor(defaultOptions: StructServiceOptions) {\n    this.defaultOptions = defaultOptions\n  }\n\n  async generateInchIKey(struct: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const worker: Worker = new IndigoWorker()\n\n      worker.onmessage = (e: MessageEvent<OutputMessage<string>>) => {\n        worker.terminate()\n        const msg: OutputMessage<string> = e.data\n        if (!msg.hasError) {\n          resolve(msg.payload || '')\n        } else {\n          reject(msg.error)\n        }\n      }\n\n      const inputMessage: InputMessage<GenerateInchIKeyCommandData> = {\n        type: Command.GenerateInchIKey,\n        data: { struct }\n      }\n\n      worker.postMessage(inputMessage)\n    })\n  }\n\n  info(): Promise<InfoResult> {\n    return new Promise((resolve, reject) => {\n      const worker: Worker = new IndigoWorker()\n\n      worker.onmessage = (e: MessageEvent<OutputMessage<string>>) => {\n        worker.terminate()\n        const msg: OutputMessage<string> = e.data\n        if (!msg.hasError) {\n          const result: InfoResult = {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            indigoVersion: msg.payload!,\n            imagoVersions: [],\n            isAvailable: true\n          }\n          resolve(result)\n        } else {\n          reject(msg.error)\n        }\n      }\n\n      worker.postMessage({ type: Command.Info })\n    })\n  }\n\n  convert(\n    data: ConvertData,\n    options?: StructServiceOptions\n  ): Promise<ConvertResult> {\n    const { output_format, struct } = data\n    const format = convertMimeTypeToOutputFormat(output_format)\n\n    return new Promise((resolve, reject) => {\n      const worker: Worker = new IndigoWorker()\n\n      worker.onmessage = (e: MessageEvent<OutputMessage<string>>) => {\n        worker.terminate()\n        const msg: OutputMessage<string> = e.data\n        if (!msg.hasError) {\n          const result: ConvertResult = {\n            struct: msg.payload!,\n            format: output_format\n          }\n          resolve(result)\n        } else {\n          reject(msg.error)\n        }\n      }\n\n      const commandOptions: CommandOptions = {\n        ...this.defaultOptions,\n        ...options\n      }\n\n      const commandData: ConvertCommandData = {\n        struct,\n        format,\n        options: commandOptions\n      }\n\n      const inputMessage: InputMessage<ConvertCommandData> = {\n        type: Command.Convert,\n        data: commandData\n      }\n\n      worker.postMessage(inputMessage)\n    })\n  }\n\n  layout(\n    data: LayoutData,\n    options?: StructServiceOptions\n  ): Promise<LayoutResult> {\n    const { struct, output_format } = data\n    const format = convertMimeTypeToOutputFormat(output_format)\n\n    return new Promise((resolve, reject) => {\n      const worker: Worker = new IndigoWorker()\n\n      worker.onmessage = (e: MessageEvent<OutputMessage<string>>) => {\n        worker.terminate()\n        const msg: OutputMessage<string> = e.data\n        if (!msg.hasError) {\n          const result: LayoutResult = {\n            struct: msg.payload!,\n            format: ChemicalMimeType.Mol\n          }\n          resolve(result)\n        } else {\n          reject(msg.error)\n        }\n      }\n\n      const commandOptions: CommandOptions = {\n        ...this.defaultOptions,\n        ...options\n      }\n\n      const commandData: LayoutCommandData = {\n        struct,\n        format,\n        options: commandOptions\n      }\n\n      const inputMessage: InputMessage<LayoutCommandData> = {\n        type: Command.Layout,\n        data: commandData\n      }\n\n      worker.postMessage(inputMessage)\n    })\n  }\n\n  clean(data: CleanData, options?: StructServiceOptions): Promise<CleanResult> {\n    const { struct, selected, output_format } = data\n    const format = convertMimeTypeToOutputFormat(output_format)\n\n    return new Promise((resolve, reject) => {\n      const worker: Worker = new IndigoWorker()\n\n      worker.onmessage = (e: MessageEvent<OutputMessage<string>>) => {\n        worker.terminate()\n        const msg: OutputMessage<string> = e.data\n        if (!msg.hasError) {\n          const result: CleanResult = {\n            struct: msg.payload!,\n            format: ChemicalMimeType.Mol\n          }\n          resolve(result)\n        } else {\n          reject(msg.error)\n        }\n      }\n\n      const commandOptions: CommandOptions = {\n        ...this.defaultOptions,\n        ...options\n      }\n\n      const commandData: CleanCommandData = {\n        struct,\n        format,\n        options: commandOptions,\n        selectedAtoms: selected || []\n      }\n\n      const inputMessage: InputMessage<CleanCommandData> = {\n        type: Command.Clean,\n        data: commandData\n      }\n\n      worker.postMessage(inputMessage)\n    })\n  }\n\n  aromatize(\n    data: AromatizeData,\n    options?: StructServiceOptions\n  ): Promise<AromatizeResult> {\n    const { struct, output_format } = data\n    const format = convertMimeTypeToOutputFormat(output_format)\n\n    return new Promise((resolve, reject) => {\n      const worker: Worker = new IndigoWorker()\n\n      worker.onmessage = (e: MessageEvent<OutputMessage<string>>) => {\n        worker.terminate()\n        const msg: OutputMessage<string> = e.data\n        if (!msg.hasError) {\n          const result: AromatizeResult = {\n            struct: msg.payload!,\n            format: ChemicalMimeType.Mol\n          }\n          resolve(result)\n        } else {\n          reject(msg.error)\n        }\n      }\n\n      const commandOptions: CommandOptions = {\n        ...this.defaultOptions,\n        ...options\n      }\n\n      const commandData: AromatizeCommandData = {\n        struct,\n        format,\n        options: commandOptions\n      }\n\n      const inputMessage: InputMessage<AromatizeCommandData> = {\n        type: Command.Aromatize,\n        data: commandData\n      }\n\n      worker.postMessage(inputMessage)\n    })\n  }\n\n  dearomatize(\n    data: DearomatizeData,\n    options?: StructServiceOptions\n  ): Promise<DearomatizeResult> {\n    const { struct, output_format } = data\n    const format = convertMimeTypeToOutputFormat(output_format)\n\n    return new Promise((resolve, reject) => {\n      const worker: Worker = new IndigoWorker()\n\n      worker.onmessage = (e: MessageEvent<OutputMessage<string>>) => {\n        worker.terminate()\n        const msg: OutputMessage<string> = e.data\n        if (!msg.hasError) {\n          const result: AromatizeResult = {\n            struct: msg.payload!,\n            format: ChemicalMimeType.Mol\n          }\n          resolve(result)\n        } else {\n          reject(msg.error)\n        }\n      }\n\n      const commandOptions: CommandOptions = {\n        ...this.defaultOptions,\n        ...options\n      }\n\n      const commandData: DearomatizeCommandData = {\n        struct,\n        format,\n        options: commandOptions\n      }\n\n      const inputMessage: InputMessage<DearomatizeCommandData> = {\n        type: Command.Dearomatize,\n        data: commandData\n      }\n\n      worker.postMessage(inputMessage)\n    })\n  }\n\n  calculateCip(\n    data: CalculateCipData,\n    options?: StructServiceOptions\n  ): Promise<CalculateCipResult> {\n    const { struct, output_format } = data\n    const format = convertMimeTypeToOutputFormat(output_format)\n\n    return new Promise((resolve, reject) => {\n      const worker: Worker = new IndigoWorker()\n\n      worker.onmessage = (e: MessageEvent<OutputMessage<string>>) => {\n        worker.terminate()\n        const msg: OutputMessage<string> = e.data\n        if (!msg.hasError) {\n          const result: CalculateCipResult = {\n            struct: msg.payload!,\n            format: ChemicalMimeType.Mol\n          }\n          resolve(result)\n        } else {\n          reject(msg.error)\n        }\n      }\n\n      const commandOptions: CommandOptions = {\n        ...this.defaultOptions,\n        ...options\n      }\n\n      const commandData: CalculateCipCommandData = {\n        struct,\n        format,\n        options: commandOptions\n      }\n\n      const inputMessage: InputMessage<CalculateCipCommandData> = {\n        type: Command.CalculateCip,\n        data: commandData\n      }\n\n      worker.postMessage(inputMessage)\n    })\n  }\n\n  automap(\n    data: AutomapData,\n    options?: StructServiceOptions\n  ): Promise<AutomapResult> {\n    const { mode, struct, output_format } = data\n    const format = convertMimeTypeToOutputFormat(output_format)\n\n    return new Promise((resolve, reject) => {\n      const worker: Worker = new IndigoWorker()\n\n      worker.onmessage = (e: MessageEvent<OutputMessage<string>>) => {\n        worker.terminate()\n        const msg: OutputMessage<string> = e.data\n        if (!msg.hasError) {\n          const result: AutomapResult = {\n            struct: msg.payload!,\n            format: ChemicalMimeType.Mol\n          }\n          resolve(result)\n        } else {\n          reject(msg.error)\n        }\n      }\n\n      const commandOptions: CommandOptions = {\n        ...this.defaultOptions,\n        ...options\n      }\n\n      const commandData: AutomapCommandData = {\n        struct,\n        format,\n        mode,\n        options: commandOptions\n      }\n\n      const inputMessage: InputMessage<CalculateCipCommandData> = {\n        type: Command.Automap,\n        data: commandData\n      }\n\n      worker.postMessage(inputMessage)\n    })\n  }\n\n  check(data: CheckData, options?: StructServiceOptions): Promise<CheckResult> {\n    const { types, struct } = data\n\n    return new Promise((resolve, reject) => {\n      const worker: Worker = new IndigoWorker()\n\n      worker.onmessage = (e: MessageEvent<OutputMessage<string>>) => {\n        worker.terminate()\n        const msg: OutputMessage<string> = e.data\n        if (!msg.hasError) {\n          const warnings = JSON.parse(msg.payload!) as KeyValuePair\n\n          const result: CheckResult = Object.entries(warnings).reduce(\n            (acc, curr) => {\n              const [key, value] = curr\n              const mappedPropertyName = mapWarningGroup(key)\n              acc[mappedPropertyName] = value\n\n              return acc\n            },\n            {}\n          )\n          resolve(result)\n        } else {\n          reject(msg.error)\n        }\n      }\n\n      const commandOptions: CommandOptions = {\n        ...this.defaultOptions,\n        ...options\n      }\n\n      const commandData: CheckCommandData = {\n        struct,\n        types,\n        options: commandOptions\n      }\n\n      const inputMessage: InputMessage<CheckCommandData> = {\n        type: Command.Check,\n        data: commandData\n      }\n\n      worker.postMessage(inputMessage)\n    })\n  }\n\n  calculate(\n    data: CalculateData,\n    options?: StructServiceOptions\n  ): Promise<CalculateResult> {\n    const { properties, struct, selected } = data\n    return new Promise((resolve, reject) => {\n      const worker: Worker = new IndigoWorker()\n\n      worker.onmessage = (e: MessageEvent<OutputMessage<string>>) => {\n        worker.terminate()\n        const msg: OutputMessage<string> = e.data\n        if (!msg.hasError) {\n          const calculatedProperties: CalculateResult = JSON.parse(msg.payload!)\n          const result: CalculateResult = Object.entries(\n            calculatedProperties\n          ).reduce((acc, curr) => {\n            const [key, value] = curr\n            const mappedPropertyName = mapCalculatedPropertyName(\n              key as CalculateProps\n            )\n            if (properties.includes(mappedPropertyName)) {\n              acc[mappedPropertyName] = value\n            }\n\n            return acc\n          }, {} as CalculateResult)\n          resolve(result)\n        } else {\n          reject(msg.error)\n        }\n      }\n\n      const commandOptions: CommandOptions = {\n        ...this.defaultOptions,\n        ...options\n      }\n\n      const commandData: CalculateCommandData = {\n        struct,\n        properties,\n        options: commandOptions,\n        selectedAtoms: selected || []\n      }\n\n      const inputMessage: InputMessage<CalculateCommandData> = {\n        type: Command.Calculate,\n        data: commandData\n      }\n\n      worker.postMessage(inputMessage)\n    })\n  }\n\n  recognize(_blob: Blob, _version: string): Promise<RecognizeResult> {\n    return Promise.reject(new Error('Not supported in standalone mode'))\n  }\n\n  generateImageAsBase64(\n    data: string,\n    options: GenerateImageOptions = { outputFormat: 'png', backgroundColor: '' }\n  ): Promise<string> {\n    const { outputFormat, backgroundColor, ...restOptions } = options\n    return new Promise((resolve, reject) => {\n      const worker: Worker = new IndigoWorker()\n\n      worker.onmessage = (e: MessageEvent<OutputMessage<string>>) => {\n        worker.terminate()\n        const msg: OutputMessage<string> = e.data\n        if (!msg.hasError) {\n          resolve(msg.payload!)\n        } else {\n          reject(msg.error)\n        }\n      }\n\n      const commandOptions: CommandOptions = {\n        ...this.defaultOptions,\n        ...restOptions\n      }\n\n      const commandData: GenerateImageCommandData = {\n        struct: data,\n        outputFormat: outputFormat || 'png',\n        backgroundColor: backgroundColor,\n        options: commandOptions\n      }\n\n      const inputMessage: InputMessage<GenerateImageCommandData> = {\n        type: Command.GenerateImageAsBase64,\n        data: commandData\n      }\n\n      worker.postMessage(inputMessage)\n    })\n  }\n}\n\nexport default IndigoService\n","/****************************************************************************\n * Copyright 2021 EPAM Systems\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n ***************************************************************************/\n\nimport {\n  ServiceMode,\n  StructService,\n  StructServiceOptions,\n  StructServiceProvider\n} from 'ketcher-core'\n\nimport StandaloneStructService from './standaloneStructService'\n\nclass StandaloneStructServiceProvider implements StructServiceProvider {\n  mode: ServiceMode = 'standalone'\n\n  createStructService(options: StructServiceOptions): StructService {\n    return new StandaloneStructService(options)\n  }\n}\nexport default StandaloneStructServiceProvider\n"],"names":["Command","SupportedFormat","convertMimeTypeToOutputFormat","mimeType","format","ChemicalMimeType","Mol","Rxn","DaylightSmiles","ExtendedSmiles","Smiles","DaylightSmarts","Smarts","InChI","InChIAuxInfo","CML","KET","Ket","CDXML","Error","mapCalculatedPropertyName","property","mappedProperty","mapWarningGroup","toLowerCase","IndigoService","defaultOptions","_classCallCheck","_asyncToGenerator","_regeneratorRuntime","struct","Promise","resolve","reject","worker","IndigoWorker","onmessage","e","terminate","msg","data","hasError","payload","error","inputMessage","type","GenerateInchIKey","postMessage","result","indigoVersion","imagoVersions","isAvailable","Info","options","output_format","commandOptions","commandData","Convert","Layout","selected","selectedAtoms","Clean","Aromatize","Dearomatize","CalculateCip","mode","Automap","types","warnings","JSON","parse","Object","entries","reduce","acc","curr","_slicedToArray","key","value","mappedPropertyName","Check","properties","calculatedProperties","includes","Calculate","_blob","_version","outputFormat","backgroundColor","restOptions","GenerateImageAsBase64","StandaloneStructServiceProvider","StandaloneStructService"],"mappings":"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"}